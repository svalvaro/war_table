---
title: "World of Wars"
format: 
  html:
    page-layout: custom
server: shiny
---

```{r}
#| column: body

box::use(
  reactable[...],
  leaflet[...],
  shinyWidgets[...]
  )

mainPanel(
  includeCSS("css/styles.css"),
  
  leafletOutput("world_map"),
  
  absolutePanel(top = 10, right = 10,
    sliderInput(
      "period_time",
      "Select the period of time:",
      min = 1823,
      max = 2003,
      value = c(1823, 2003)
  ),
    sliderInput(
      "casualties_input",
      "Select the total number of casualties:",
      min = 0,
      max = 2e7,
      value = c(0, 17e6),
      step = 1e3
      )
  )
)
# mainPanel(width = 12,
#   includeCSS("css/styles.css"),
#   leafletOutput("world_map"),
#   absolutePanel(top = 10, right = 10,
#     sliderInput(
#       "period_time",
#       "Select the period of time:",
#       min = 1823,
#       max = 2003,
#       value = c(1823, 2003)
#   ),
#     sliderInput(
#       "casualties_input",
#       "Select the total number of casualties:",
#       min = 0,
#       max = 2e7,
#       value = c(0, 17e6),
#       step = 1e3
#       )
#   )
# )
```


```{r}
#| context: server
box::use(
  R/data_processing,
  R/map_functions,
  reactable[...],
  htmltools[...],
  dplyr[...],
  shinyWidgets[...],
  leaflet[...],
  glue[...],
  maps[...],
  purrr[...]
  )

process_raw_war_data <- data_processing$process_raw_war_data("data/Inter-StateWarData_v4.0.csv")

aggregated_war_data <- data_processing$aggregate_war_data(process_raw_war_data)

filtered_war_data <- reactive({
  filtered_war_data <-  aggregated_war_data %>% 
    filter(total_deaths >= input$casualties_input[1],
           total_deaths <= input$casualties_input[2],
           start_year >= input$period_time[1],
           end_year <= input$period_time[2]
           )
  return(filtered_war_data)
})

filtered_by_country <- reactive({
    if (!is.null(selected_state())) {
    filtered_war_data() %>% 
      filter(grepl(selected_state(), states_participants))
  }
})

output$table <- renderReactable({
  if (is.null(filtered_by_country())) return(NULL)
  reactable(
    filtered_by_country(),
    defaultColDef = colDef(show = FALSE),
    height = 1500,
    columns = list(
      war_details = colDef(
        html = TRUE,
        align = "center",
        name = "War",
        show = TRUE
      ),
      initiators = colDef(
        html = TRUE,
        align = "center",
        name = glue("Initiators {htmltools::img(src = 'images/initiators.jpg', style = 'height: 24px;')}"),
        show = TRUE
        ),
      defenders = colDef(
        html = TRUE,
        align = "center",
        name = glue("Defenders {htmltools::img(src = 'images/shield.jpg', style = 'height: 24px;')}"),
        show = TRUE
      )
    )
  )
  })


# Flags of the states
state_flags <- process_raw_war_data %>% select(c("StateName","country_flag")) %>% distinct()
# Map section

countries_mapped <- reactive({
  participant_countries <- paste(filtered_war_data()$states_participants, collapse = ',')
  participant_countries <- unique(as.list(strsplit(participant_countries,",")[[1]]))

  countries_mapped <- map_functions$create_df_countries_locations(participant_countries)
  
  countries_mapped_flags = merge(countries_mapped, state_flags, by.x = "country", by.y = "StateName")
})

output$world_map <- renderLeaflet({

    map_plot <- leaflet(countries_mapped()) %>%
      #addProviderTiles("Thunderforest.Outdoors")
      addProviderTiles("CartoDB.Positron")
    # addTiles("http://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x}")
  
  if (nrow(countries_mapped()) > 0) {
    
    suppressMessages(
      map_plot <- map_plot  %>%
        addMarkers(
          label = ~ country,
          layerId = ~ country,
          icon = list(iconUrl = ~ country_flag, iconSize = c(20,20))
          )
      )
  }
  return(map_plot)
  })

selected_state <- reactiveVal(NULL)

observeEvent(input$world_map_marker_click,{
  if (is.null(input$world_map_marker_click)) return(NULL)
  selected_state(input$world_map_marker_click$id)
})


# Modal Dialog

observeEvent(input$world_map_marker_click, {
  
  flag_selected_country = countries_mapped()$country_flag[countries_mapped()$country == selected_state()]
  print(flag_selected_country)
  
      showModal(modalDialog(
        title = HTML(glue(
          "Wars that <img src='{flag_selected_country}' height='20'> {selected_state()} has participated."
          )),
        reactableOutput("table"),
        easyClose = TRUE
      ),)
    })



```
