---
title: "A hostile world"
format: 
  html:
    page-layout: custom
server: shiny
---

```{r}
#| column: body

box::use(
  reactable[...],
  leaflet[...],
  shinyWidgets[...],
  htmltools[...]
  )

mainPanel(
 
  
  leafletOutput("world_map"),
  
  absolutePanel(class = "filterPanel",
    sliderInput(
      "period_time",
      h2("Time Period:") %>% tagAppendAttributes(class = "warFont"),
      min = 1823,
      max = 2003,
      value = c(1823, 2003),
  ),

    sliderTextInput(
      inputId = "casualties_input",
      h2("Total Casualties:") %>% tagAppendAttributes(class = "warFont"),
      choices = c("1 K", "10 K", "100 K", "1 M", "5 M", "10 M", "20 M"),
      selected = c("1 K", "20 M"),
      grid = FALSE
      ) %>% tagAppendAttributes(id = "casualtiesSlider")
  ),
   includeCSS("css/styles.css")
)
```


```{r}
#| context: server
box::use(
  R/data_processing,
  R/map_functions,
  R/table_modal,
  reactable[...],
  htmltools[...],
  dplyr[...],
  shinyWidgets[...],
  leaflet[...],
  glue[...],
  maps[...],
  purrr[...]
  )

process_raw_war_data <- data_processing$process_raw_war_data("data/Inter-StateWarData_v4.0.csv")

aggregated_war_data <- data_processing$aggregate_war_data(process_raw_war_data)

filtered_war_data <- reactive({
  total_deaths_min <- data_processing$readable_to_numeric_casualties(input$casualties_input[1])
  total_deaths_max <- data_processing$readable_to_numeric_casualties(input$casualties_input[2])
  
  filtered_war_data <-  aggregated_war_data %>% 
    filter(total_deaths >= total_deaths_min,
           total_deaths <= total_deaths_max,
           start_year >= input$period_time[1],
           end_year <= input$period_time[2]
           )
  return(filtered_war_data)
})

filtered_by_country <- reactive({
    if (!is.null(selected_state())) {
    filtered_war_data() %>% 
      filter(grepl(selected_state(), states_participants))
  }
})

output$table <- renderReactable({
  if (is.null(filtered_by_country())) return(NULL)
  table_modal$generate_war_table(filtered_by_country())
  # table_modal$generate_war_table(aggregated_war_data)
  })

# Flags of the states
state_flags <- process_raw_war_data %>% select(c("StateName","country_flag")) %>% distinct()
# Map section

countries_mapped <- reactive({
  participant_countries <- paste(filtered_war_data()$states_participants, collapse = ',')
  participant_countries <- unique(as.list(strsplit(participant_countries,",")[[1]]))

  countries_mapped <- map_functions$create_df_countries_locations(participant_countries)
  
  countries_mapped_flags = merge(countries_mapped, state_flags, by.x = "country", by.y = "StateName")
})

output$world_map <- renderLeaflet({

    map_plot <- leaflet(countries_mapped()) %>%
      #addProviderTiles("Thunderforest.Outdoors")
      addProviderTiles("CartoDB.Positron")
    # addTiles("http://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x}")
  
  if (nrow(countries_mapped()) > 0) {
    
    suppressMessages(
      map_plot <- map_plot  %>%
        addMarkers(
          label = ~ country,
          layerId = ~ country,
          icon = list(iconUrl = ~ country_flag, iconSize = c(35,35))
          )
      )
  }
  return(map_plot)
  })

selected_state <- reactiveVal(NULL)

observeEvent(input$world_map_marker_click,{
  if (is.null(input$world_map_marker_click)) return(NULL)
  selected_state(input$world_map_marker_click$id)
})


# Modal Dialog

observeEvent(input$world_map_marker_click, {
  
  flag_selected_country = countries_mapped()$country_flag[countries_mapped()$country == selected_state()]
  
      showModal(modalDialog(
        title = HTML(glue(
          "<div class = 'stateName'> Wars that <img src='{flag_selected_country}' height='25'> {selected_state()} has participated.</div>"
          )),
        HTML(
          '
          <div class="scroll-downs">
            <div class="mousey">
              <div class="scroller"></div>
            </div>
          </div>
          '
        ),
        reactableOutput("table"),
        
        easyClose = TRUE
      )) 
    })



```
