---
title: "A hostile world"
format: 
  html
server: shiny
---

```{r}
#| panel: fill

box::use(
  reactable[...],
  leaflet[...],
  shinyWidgets[...],
  htmltools[...]
  )

shiny::fluidPage(
  
  shiny::fluidRow(
    shiny::column(
      width = 6,
       sliderInput(
        "period_time",
        h2("Time Period:") %>% tagAppendAttributes(class = "warFont"),
        min = 1823,
        max = 2003,
        value = c(1823, 2003)
        )
      ),
    shiny::column(
      width = 6,
      sliderTextInput(
      inputId = "casualties_input",
      h2("Total Casualties:") %>% tagAppendAttributes(class = "warFont"),
      choices = c("1 K", "10 K", "100 K", "1 M", "5 M", "10 M", "20 M"),
      selected = c("1 K", "20 M"),
      grid = FALSE
      ) %>% tagAppendAttributes(id = "casualtiesSlider")
    )
  ),
  
  shiny::fluidRow(
    reactableOutput("table")
  ),
    
    # absolutePanel(
    #   class = "filterPanel",
    #   sliderInput(
    #     "period_time",
    #     h2("Time Period:") %>% tagAppendAttributes(class = "warFont"),
    #     min = 1823,
    #     max = 2003,
    #     value = c(1823, 2003)
    #     ),
    # sliderTextInput(
    #   inputId = "casualties_input",
    #   h2("Total Casualties:") %>% tagAppendAttributes(class = "warFont"),
    #   choices = c("1 K", "10 K", "100 K", "1 M", "5 M", "10 M", "20 M"),
    #   selected = c("1 K", "20 M"),
    #   grid = FALSE
    #   ) %>% tagAppendAttributes(id = "casualtiesSlider")
    # ),
  includeCSS("css/styles.css")
)
```


```{r}
#| context: server
box::use(
  R/data_processing,
  R/map_functions,
  R/reactable_functions,
  reactable[...],
  htmltools[...],
  dplyr[...],
  shinyWidgets[...],
  leaflet[...],
  glue[...],
  maps[...],
  purrr[...]
  )

process_raw_war_data <- data_processing$process_raw_war_data("data/Inter-StateWarData_v4.0.csv")

aggregated_war_data <- data_processing$aggregate_war_data(process_raw_war_data)

# Maps column

participant_countries <- paste(aggregated_war_data$states_participants, collapse = ',')
participant_countries <- unique(as.list(strsplit(participant_countries,",")[[1]]))

countries_mapped <- map_functions$create_df_countries_locations(participant_countries)
state_flags <- process_raw_war_data %>% select(c("StateName","country_flag")) %>% distinct()

countries_mapped_flags = merge(countries_mapped, state_flags, by.x = "country", by.y = "StateName")

map_list <- suppressMessages(map_functions$create_list_maps(aggregated_war_data, countries_mapped_flags))

filtered_war_data <- reactive({
  total_deaths_min <- data_processing$readable_to_numeric_casualties(input$casualties_input[1])
  total_deaths_max <- data_processing$readable_to_numeric_casualties(input$casualties_input[2])
  
  filtered_war_data <-  aggregated_war_data %>% 
    filter(total_deaths >= total_deaths_min,
           total_deaths <= total_deaths_max,
           start_year >= input$period_time[1],
           end_year <= input$period_time[2]
           )
  return(filtered_war_data)
})

output$table <- renderReactable({
  
  reactable_functions$generate_war_table(filtered_war_data(), map_list)
  })
```
