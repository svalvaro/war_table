---
title: "A hostile world"
format: 
  html
server: shiny
---

```{r}
#| panel: fill

box::use(
  reactable[...],
  leaflet[...],
  shinyWidgets[...],
  htmltools[...],
  curl[...]
  )

shiny::fluidPage(
  
  shiny::fluidRow(
    shiny::column(
      width = 4,
       shiny::selectizeInput(
        "war_selector",
        h4("Wars:") %>% tagAppendAttributes(class = "warFont"),
        choices = NULL,
        multiple = TRUE,
        options = list(placeholder = "Showing all wars")
        ) %>% tagAppendAttributes(id = "warSelector", class = "war_selector_class")
      ),
    shiny::column(
      width = 4,
       sliderInput(
        "period_time",
        h4("Time Period:") %>% tagAppendAttributes(class = "warFont"),
        min = 1823,
        max = 2003,
        value = c(1823, 2003),
        sep = ""
        ) %>% tagAppendAttributes(id = "timeSlider")
      ),
    shiny::column(
      width = 4,
      sliderInput(
      inputId = "casualties_input",
      h4("Casualties:") %>% tagAppendAttributes(class = "warFont"),
      min = 1e3,
      max = 2e7,
      step = 5e3,
      value = c(1e3, 2e7)
      ) %>% tagAppendAttributes(id = "casualtiesSlider")
    )
  ),
  
  shiny::fluidRow(
    reactableOutput("table")
    ),
  
  shiny::fluidRow(
    class = "legend",
    column(
      width = 2,
      class = "text-center",
      htmltools::img(src = 'images/war_winner.png', style = 'height: 20px;'),
      h6("Victorius")
      ),
    column(
      width = 2,
      class = "text-center",
      htmltools::img(src = 'images/war_defeated.png', style = 'height: 20px;'),
      h6("Defeated")
    ),
    column(
      width = 2,
      class = "text-center",
      htmltools::img(src = 'images/stalemate.png', style = 'height: 20px;'),
      h6("Stalemate")
    ),
    column(
      width = 2,
      class = "text-center",
      htmltools::img(src = 'images/transform.png', style = 'height: 20px;'),
      h6("Evolved into other war")
    ),
    column(
      width = 2, 
      class = "text-center",
      htmltools::img(src = 'images/sword.png', style = 'height: 20px;'),
      h6("Intiator state")
    ),
    column(
      width = 2,
      class = "text-center",
      htmltools::img(src = 'images/skull.png', style = 'height: 20px;'),
      h6("Casualties")
    )
    ),
  includeCSS("css/styles.css")
)
```

```{r}
#| context: server
box::use(
  R/data_processing,
  R/map_functions,
  R/reactable_functions,
  reactable[...],
  htmltools[...],
  dplyr[...],
  shinyWidgets[...],
  leaflet[...],
  glue[...],
  maps[...],
  purrr[...]
  )

process_raw_war_data <- data_processing$process_raw_war_data("data/Inter-StateWarData_v4.0.csv")

aggregated_war_data <- data_processing$aggregate_war_data(process_raw_war_data)

wars_list <- unique(aggregated_war_data$WarName)

observe({
  shiny::updateSelectInput(
    inputId = "war_selector",
    choices =  wars_list
  )
})

# Maps column

participant_countries <- paste(aggregated_war_data$states_participants, collapse = ',')
participant_countries <- unique(as.list(strsplit(participant_countries,",")[[1]]))

countries_mapped <- map_functions$create_df_countries_locations(participant_countries)
state_flags <- process_raw_war_data %>% select(c("StateName","country_flag")) %>% distinct()

countries_mapped_flags = merge(countries_mapped, state_flags, by.x = "country", by.y = "StateName")

map_list <- suppressMessages(map_functions$create_list_maps(aggregated_war_data, countries_mapped_flags))




filtered_war_data <- reactive({
  req(input$casualties_input[1])
  req(input$casualties_input[2])
  
  total_deaths_min <- input$casualties_input[1]
  total_deaths_max <- input$casualties_input[2]
  
  filtered_war_data <-  aggregated_war_data %>% 
    filter(total_deaths >= total_deaths_min,
           total_deaths <= total_deaths_max,
           start_year >= input$period_time[1],
           end_year <= input$period_time[2]
           )
  if (! is.null(input$war_selector)) {
    filtered_war_data <-  aggregated_war_data %>% 
      filter(WarName %in% input$war_selector)
  }
  
  return(filtered_war_data)
})

output$table <- renderReactable({
  
  reactable_functions$generate_war_table(filtered_war_data(), map_list)
  })

```
